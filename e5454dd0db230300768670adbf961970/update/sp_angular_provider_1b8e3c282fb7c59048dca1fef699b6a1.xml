<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_angular_provider">
    <sp_angular_provider action="INSERT_OR_UPDATE">
        <name>cn_sctv_dateUtilsjs</name>
        <script><![CDATA[// ===================================================================
// Author: Matt Kruse <matt@mattkruse.com>
// WWW: http://www.mattkruse.com/
//
// NOTICE: You may use this code for any purpose, commercial or
// private, without any further permission from the author. You may
// remove this notice from your final code if you wish, however it is
// appreciated by the author if at least my web site address is kept.
//
// You may *NOT* re-distribute this code in any way except through its
// use. That means, you can include it in your product, or your web
// site, or any other form where the code is actually being used. You
// may not put the plain javascript up on your site for download or
// include it in your javascript libraries for download.
// If you wish to share this code with others, please just point them
// to the URL instead.
// Please DO NOT link directly to my .js files from your site. Copy
// the files to your server and use them there. Thank you.
// ===================================================================

/* SOURCE FILE: date.js */

// HISTORY
// ------------------------------------------------------------------
// May 17, 2003: Fixed bug in parseDate() for dates <1970
// March 11, 2003: Added parseDate() function
// March 11, 2003: Added "NNN" formatting option. Doesn't match up
// perfectly with SimpleDateFormat formats, but
// backwards-compatability was required.
// ------------------------------------------------------------------
// These functions use the same 'format' strings as the
// java.text.SimpleDateFormat class, with minor exceptions.
// The format string consists of the following abbreviations:
//
// Field | Full Form | Short Form
// -------------+--------------------+-----------------------
// Year | yyyy (4 digits) | yy (2 digits), y (2 or 4 digits)
// Month | MMM (name or abbr.)| MM (2 digits), M (1 or 2 digits)
// | NNN (abbr.) |
// Day of Month | dd (2 digits) | d (1 or 2 digits)
// Day of Week | EE (name) | E (abbr)
// Hour (1-12) | hh (2 digits) | h (1 or 2 digits)
// Hour (0-23) | HH (2 digits) | H (1 or 2 digits)
// Hour (0-11) | KK (2 digits) | K (1 or 2 digits)
// Hour (1-24) | kk (2 digits) | k (1 or 2 digits)
// Minute | mm (2 digits) | m (1 or 2 digits)
// Second | ss (2 digits) | s (1 or 2 digits)
// AM/PM | a |
// Week in Yr. | ww (2 digits) | w ( 1 or 2 digits)
// Day of Wk Num| D ( 1 digit) |
// -------------+--------------------+------------------------
//
// NOTE THE DIFFERENCE BETWEEN MM and mm! Month=MM, not mm!
// Examples:
// "MMM d, y" matches: January 01, 2000
// Dec 1, 1900
// Nov 20, 00
// "M/d/yy" matches: 01/20/00
// 9/2/00
// "MMM dd, yyyy hh:mm:ssa" matches: "January 01, 2000 12:30:45AM"
// ------------------------------------------------------------------
(function(global, factory) {
    var dateUtils = factory();
    global.acn_sctv_dateUtils = dateUtils;
}(this, function() {

            CatTblVarDateUtils = {
                SYS_DATE_FORMAT : "yyyy-MM-dd",
                SYS_TIME_FORMAT : "HH:mm:ss",
                SYS_DATE_TIME_FORMAT : "yyyy-MM-dd HH:mm:ss",
                MONTH_NAMES : new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'Jan', 'Feb',
                        'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'),
                DAY_NAMES : new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'),
                LZ : function(x) {
                    return (x < 0 || x > 9 ? "" : "0") + x
                },

                // ------------------------------------------------------------------
                // isDate ( date_string, format_string )
                // Returns true if date string matches format of format string and
                // is a valid date. Else returns false.
                // It is recommended that you trim whitespace around the value before
                // passing it to this function, as whitespace is NOT ignored!
                // ------------------------------------------------------------------
                isDate : function(val, format) {
                    var date = this.getDateFromFormat(val, format);
                    if (date == 0) {
                        return false;
                    }
                    return true;
                },

                // -------------------------------------------------------------------
                // compareDates(date1,date1format,date2,date2format)
                // Compare two date strings to see which is greater.
                // Returns:
                // 1 if date1 is greater than date2
                // 0 if date2 is greater than date1 of if they are the same
                // -1 if either of the dates is in an invalid format
                // -------------------------------------------------------------------
                compareDates : function(date1, dateformat1, date2, dateformat2) {
                    var d1 = this.getDateFromFormat(date1, dateformat1);
                    var d2 = this.getDateFromFormat(date2, dateformat2);
                    if (d1 == 0 || d2 == 0) {
                        return -1;
                    } else if (d1 > d2) {
                        return 1;
                    }
                    return 0;
                },

                formatDateServer : function(date, format) {
                    var ga = new GlideAjax("DateTimeUtils");
                    ga.addParam("sysparm_name", "formatCalendarDate");
                    var browserOffset = date.getTimezoneOffset() * 60000;
                    var utcTime = date.getTime() - browserOffset;
                    var userDateTime = utcTime - g_tz_offset;
                    ga.addParam("sysparm_value", userDateTime);
                    ga.getXMLWait();
                    return ga.getAnswer();
                },

                // ------------------------------------------------------------------
                // formatDate (date_object, format)
                // Returns a date in the output format specified.
                // The format string uses the same abbreviations as in getDateFromFormat()
                // ------------------------------------------------------------------
                formatDate : function(date, format) {
                    if (format.indexOf("z") > 0)
                        return this.formatDateServer(date, format);

                    format = format + "";
                    var result = "";
                    var i_format = 0;
                    var c = "";
                    var token = "";
                    var y = date.getYear() + "";
                    var M = date.getMonth() + 1;
                    var d = date.getDate();
                    var E = date.getDay();
                    var H = date.getHours();
                    var m = date.getMinutes();
                    var s = date.getSeconds();
                    var yyyy, yy, MMM, MM, dd, hh, h, mm, ss, ampm, HH, H, KK, K, kk, k;
                    // Convert real date parts into formatted versions
                    var value = new Object();

                    value["M"] = M;
                    value["MM"] = this.LZ(M);
                    value["MMM"] = this.MONTH_NAMES[M + 11];
                    value["NNN"] = this.MONTH_NAMES[M + 11];
                    value["MMMM"] = this.MONTH_NAMES[M - 1];
                    value["d"] = d;
                    value["dd"] = this.LZ(d);
                    value["E"] = this.DAY_NAMES[E + 7];
                    value["EE"] = this.DAY_NAMES[E];
                    value["H"] = H;
                    value["HH"] = this.LZ(H);

                    // handle week values if 'w' is part of the format
                    if (format.indexOf('w') != -1) {
                        var wk = date.getWeek();
                        if (wk >= 52 && M == 1) {
                            // week is in the previous year
                            y = date.getYear();
                            y--;
                            y = y + "";
                        }
                        if (wk == 1 && M == 12) {
                            // week is in the next year
                            y = date.getYear();
                            y++;
                            y = y + "";
                        }
                        value["w"] = wk;
                        value["ww"] = this.LZ(wk);
                    }
                    var dayOfWeek = (7 + (E + 1) - (g_first_day_of_week - 1)) % 7;
                    if (dayOfWeek == 0)
                        dayOfWeek = 7;

                    value["D"] = dayOfWeek;

                    if (y.length < 4) {
                        y = "" + (y - 0 + 1900);
                    }
                    value["y"] = "" + y;
                    value["yyyy"] = y;
                    value["yy"] = y.substring(2, 4);

                    if (H == 0) {
                        value["h"] = 12;
                    } else if (H > 12) {
                        value["h"] = H - 12;
                    } else {
                        value["h"] = H;
                    }
                    value["hh"] = this.LZ(value["h"]);

                    if (H > 11) {
                        value["K"] = H - 12;
                    } else {

                        value["K"] = H;
                    }
                    value["k"] = H + 1;
                    value["KK"] = this.LZ(value["K"]);
                    value["kk"] = this.LZ(value["k"]);

                    if (H > 11) {
                        value["a"] = "PM";
                    } else {
                        value["a"] = "AM";
                    }
                    value["m"] = m;
                    value["mm"] = this.LZ(m);
                    value["s"] = s;
                    value["ss"] = this.LZ(s);

                    while (i_format < format.length) {
                        c = format.charAt(i_format);
                        token = "";
                        while ((format.charAt(i_format) == c) && (i_format < format.length)) {
                            token += format.charAt(i_format++);
                        }
                        if (value[token] != null) {
                            result = result + value[token];
                        } else {
                            result = result + token;
                        }
                    }
                    return result;
                },

                // ------------------------------------------------------------------
                // Utility functions for parsing in getDateFromFormat()
                // ------------------------------------------------------------------
                _isInteger : function(val) {
                    var digits = "1234567890";
                    for (var i = 0; i < val.length; i++) {
                        if (digits.indexOf(val.charAt(i)) == -1) {
                            return false;
                        }
                    }
                    return true;
                },

                _getInt : function(str, i, minlength, maxlength) {
                    for (var x = maxlength; x >= minlength; x--) {
                        var token = str.substring(i, i + x);
                        if (token.length < minlength) {
                            return null;
                        }
                        if (this._isInteger(token)) {
                            return token;
                        }
                    }
                    return null;
                },

                // ------------------------------------------------------------------
                // getDateFromFormat( date_string , format_string )
                //
                // This function takes a date string and a format string. It matches
                // If the date string matches the format string, it returns the
                // getTime() of the date. If it does not match, it returns 0.
                // ------------------------------------------------------------------
                getDateFromFormat : function(val, format) {
                    val = val + "";
                    format = format + "";
                    var i_val = 0;
                    var i_format = 0;
                    var c = "";
                    var token = "";
                    var token2 = "";
                    var x, y;
                    var now = new Date();
                    var year = now.getYear();
                    var month = now.getMonth() + 1;
                    var date = 0;
                    var hh = now.getHours();
                    var mm = now.getMinutes();
                    var ss = now.getSeconds();
                    var ampm = "";
                    var week = false;

                    while (i_format < format.length) {
                        // Get next token from format string
                        c = format.charAt(i_format);
                        token = "";
                        while ((format.charAt(i_format) == c) && (i_format < format.length)) {
                            token += format.charAt(i_format++);
                        }
                        // Extract contents of value based on format token
                        if (token == "yyyy" || token == "yy" || token == "y") {
                            if (token == "yyyy") {
                                x = 4;
                                y = 4;
                            }
                            if (token == "yy") {
                                x = 2;
                                y = 2;
                            }
                            if (token == "y") {
                                x = 2;
                                y = 4;
                            }
                            year = this._getInt(val, i_val, x, y);
                            if (year == null) {
                                return 0;
                            }
                            i_val += year.length;
                            if (year.length == 2) {
                                if (year > 70) {
                                    year = 1900 + (year - 0);
                                } else {
                                    year = 2000 + (year - 0);
                                }
                            }
                        } else if (token == "MMM" || token == "NNN") {
                            month = 0;
                            for (var i = 0; i < this.MONTH_NAMES.length; i++) {
                                var month_name = this.MONTH_NAMES[i];
                                if (val.substring(i_val, i_val + month_name.length).toLowerCase() == month_name.toLowerCase()) {
                                    if (token == "MMM" || (token == "NNN" && i > 11)) {
                                        month = i + 1;
                                        if (month > 12) {
                                            month -= 12;
                                        }
                                        i_val += month_name.length;
                                        break;
                                    }
                                }
                            }
                            if ((month < 1) || (month > 12)) {
                                return 0;
                            }
                        } else if (token == "EE" || token == "E") {
                            for (var i = 0; i < this.DAY_NAMES.length; i++) {
                                var day_name = this.DAY_NAMES[i];
                                if (val.substring(i_val, i_val + day_name.length).toLowerCase() == day_name.toLowerCase()) {
                                    if (week) {
                                        if (i == 0 || i == 7) // Sun
                                            date += 6;
                                        else if (i == 2 || i == 9) // Tues
                                            date += 1;
                                        else if (i == 3 || i == 10) // Wed
                                            date += 2;
                                        else if (i == 4 || i == 11) // Thur
                                            date += 3;
                                        else if (i == 5 || i == 12) // Fri
                                            date += 4;
                                        else if (i == 6 || i == 13) // sat
                                            date += 5;
                                    }
                                    i_val += day_name.length;
                                    break;
                                }
                            }
                        } else if (token == "MM" || token == "M") {
                            month = this._getInt(val, i_val, token.length, 2);
                            if (month == null || (month < 1) || (month > 12)) {
                                return 0;
                            }
                            i_val += month.length;
                        } else if (token == "dd" || token == "d") {
                            date = this._getInt(val, i_val, token.length, 2);
                            if (date == null || (date < 1) || (date > 31)) {
                                return 0;
                            }
                            i_val += date.length;
                        } else if (token == "hh" || token == "h") {
                            hh = this._getInt(val, i_val, token.length, 2);
                            if (hh == null || (hh < 1) || (hh > 12)) {
                                return 0;
                            }
                            i_val += hh.length;
                        } else if (token == "HH" || token == "H") {
                            hh = this._getInt(val, i_val, token.length, 2);
                            if (hh == null || (hh < 0) || (hh > 23)) {
                                return 0;
                            }
                            i_val += hh.length;
                        } else if (token == "KK" || token == "K") {
                            hh = this._getInt(val, i_val, token.length, 2);
                            if (hh == null || (hh < 0) || (hh > 11)) {
                                return 0;
                            }
                            i_val += hh.length;
                        } else if (token == "kk" || token == "k") {
                            hh = this._getInt(val, i_val, token.length, 2);
                            if (hh == null || (hh < 1) || (hh > 24)) {
                                return 0;
                            }
                            i_val += hh.length;
                            hh--;
                        } else if (token == "mm" || token == "m") {
                            mm = this._getInt(val, i_val, token.length, 2);
                            if (mm == null || (mm < 0) || (mm > 59)) {
                                return 0;
                            }
                            i_val += mm.length;
                        } else if (token == "ss" || token == "s") {
                            ss = this._getInt(val, i_val, token.length, 2);
                            if (ss == null || (ss < 0) || (ss > 59)) {
                                return 0;
                            }
                            i_val += ss.length;
                        } else if (token == "a") {
                            if (val.substring(i_val, i_val + 2).toLowerCase() == "am") {
                                ampm = "AM";
                            } else if (val.substring(i_val, i_val + 2).toLowerCase() == "pm") {
                                ampm = "PM";
                            } else {
                                return 0;
                            }
                            i_val += 2;
                        } else if (token == "w" || token == "ww") { // week in year
                            var weekNum = this._getInt(val, i_val, token.length, 2);
                            week = true;
                            if (weekNum != null) {
                                var temp = new Date(year, 0, 1, 0, 0, 0);
                                temp.setWeek(parseInt(weekNum, 10));
                                year = temp.getFullYear();
                                month = temp.getMonth() + 1;
                                date = temp.getDate();
                            }
                            weekNum += "";
                            i_val += weekNum.length;
                        } else if (token == "D") {
                            if (week) {
                                var day = this._getInt(val, i_val, token.length, 1);
                                if ((day == null) || (day <= 0) || (day > 7))
                                    return 0;

                                var temp = new Date(year, month - 1, date, hh, mm, ss);
                                // get the current day of week that we are on (Sun=0)
                                var dayOfWeek = temp.getDay();

                                // get the day we want and adjust that to Sun=0
                                day = parseInt(day, 10);
                                day = (day + g_first_day_of_week - 1) % 7;
                                if (day == 0)
                                    day = 7;
                                day--;

                                // determine how many days we need to add to the current date
                                if (day < dayOfWeek)
                                    day = 7 - (dayOfWeek - day);
                                else
                                    day -= dayOfWeek;

                                if (day > 0) {
                                    temp.setDate(temp.getDate() + day);

                                    // apply the date and get the year/month/date again since adding the date my
                                    // rollover into
                                    // next month
                                    year = temp.getFullYear();
                                    month = temp.getMonth() + 1;
                                    date = temp.getDate();
                                }
                                i_val++;
                            }
                        } else if (token == "z")
                            i_val += 3;
                        else {
                            if (val.substring(i_val, i_val + token.length) != token) {
                                return 0;
                            } else {
                                i_val += token.length;
                            }
                        }
                    }
                    // If there are any trailing characters left in the value, it doesn't match
                    if (i_val != val.length) {
                        return 0;
                    }
                    // Is date valid for month?
                    if (month == 2) {
                        // Check for leap year
                        if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) { // leap year
                            if (date > 29) {
                                return 0;
                            }
                        } else {
                            if (date > 28) {
                                return 0;
                            }
                        }
                    }
                    if ((month == 4) || (month == 6) || (month == 9) || (month == 11)) {
                        if (date > 30) {
                            return 0;
                        }
                    }
                    // Correct hours value
                    if (hh < 12 && ampm == "PM") {
                        hh = hh - 0 + 12;
                    } else if (hh > 11 && ampm == "AM") {
                        hh -= 12;
                    }
                    var newdate = new Date(year, month - 1, date, hh, mm, ss);
                    return newdate.getTime();
                },

                // ------------------------------------------------------------------
                // parseDate( date_string [, prefer_euro_format] )
                //
                // This function takes a date string and tries to match it to a
                // number of possible date formats to get the value. It will try to
                // match against the following international formats, in this order:
                // y-M-d MMM d, y MMM d,y y-MMM-d d-MMM-y MMM d
                // M/d/y M-d-y M.d.y MMM-d M/d M-d
                // d/M/y d-M-y d.M.y d-MMM d/M d-M
                // A second argument may be passed to instruct the method to search
                // for formats like d/M/y (european format) before M/d/y (American).
                // Returns a Date object or null if no patterns match.
                // ------------------------------------------------------------------
                parseDate : function(val) {
                    var preferEuro = (arguments.length == 2) ? arguments[1] : false;
                    generalFormats = new Array('y-M-d', 'MMM d, y', 'MMM d,y', 'y-MMM-d', 'd-MMM-y', 'MMM d');
                    monthFirst = new Array('M/d/y', 'M-d-y', 'M.d.y', 'MMM-d', 'M/d', 'M-d');
                    dateFirst = new Array('d/M/y', 'd-M-y', 'd.M.y', 'd-MMM', 'd/M', 'd-M');
                    yearFirst = new Array('yyyyw.F', 'yyw.F');
                    var checkList = new Array('generalFormats', preferEuro ? 'dateFirst' : 'monthFirst', preferEuro ? 'monthFirst' : 'dateFirst', 'yearFirst');
                    var d = null;
                    for (var i = 0; i < checkList.length; i++) {
                        var l = window[checkList[i]];
                        for (var j = 0; j < l.length; j++) {
                            d = this.getDateFromFormat(val, l[j]);
                            if (d != 0) {
                                return new Date(d);
                            }
                        }
                    }
                    return null;
                }
            };

            // Return a date that represents the first day of the first week of the year
            // The ISO 8601 week-numbering can be described by counting the Thursdays: week 12 contains the 12th
            // Thursday of the
            // year.
            // If 1 January is on a Monday, Tuesday, Wednesday or Thursday, it is in week 01. If 1 January is on a
            // Friday,
            // Saturday or Sunday,
            // it is in week 52 or 53 of the previous year (there is no week 00). 28 December is always in the last week
            // of its
            // year.
            //
            // NOTE: If you make changes here, be sure and run the tests for yyww.D dates found in the
            // com.snc.test_table
            // plugin.
            // After activing the plugin navigate to Test Table -> Defaults & Client Scripts module and click the "Test
            // yyww.D
            // Dates" button.
            Date.prototype.getWeek = function() {
                var newYear = new Date(this.getFullYear(), 0, 1);
                var day = newYear.getDay() - (g_first_day_of_week - 1); // the day of week the year begins on
                day = (day >= 0 ? day : day + 7);
                var dayNum = Math.floor((this.getTime() - newYear.getTime() - (this.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;
                var weekNum;
                // if the year starts before the middle of a week
                if (day < 4) {
                    weekNum = Math.floor((dayNum + day - 1) / 7) + 1;
                    if (weekNum > 52)
                        weekNum = this._checkNextYear(weekNum);

                    return weekNum;
                }

                weekNum = Math.floor((dayNum + day - 1) / 7);
                // Am I in the last week of the previous year
                if (weekNum < 1)
                    weekNum = this._lastWeekOfYear();
                // If a leap year my first day of year can be after Thrusday and I can be in the first week of next year
                else if (weekNum > 52)
                    weekNum = this._checkNextYear(weekNum);

                return weekNum;
            };

            Date.prototype._lastWeekOfYear = function() {
                var newYear = new Date(this.getFullYear() - 1, 0, 1);
                var endOfYear = new Date(this.getFullYear() - 1, 11, 31);
                var day = newYear.getDay() - (g_first_day_of_week - 1); // the day of week the year begins on
                var dayNum = Math.floor((endOfYear.getTime() - newYear.getTime() - (endOfYear.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;
                return day < 4 ? Math.floor((dayNum + day - 1) / 7) + 1 : Math.floor((dayNum + day - 1) / 7);
            };

            Date.prototype._checkNextYear = function() {
                var nYear = new Date(this.getFullYear() + 1, 0, 1);
                var nDay = nYear.getDay() - (g_first_day_of_week - 1);
                nDay = nDay >= 0 ? nDay : nDay + 7;
                /*
                 * if the next year starts before the middle of the week, it is week #1 of that year
                 */
                return nDay < 4 ? 1 : 53;
            };

            Date.prototype.setWeek = function(weekNum) {
                weekNum--;
                var startOfYear = new Date(this.getFullYear(), 0, 1);
                var day = startOfYear.getDay() - (g_first_day_of_week - 1); // the day of week the year begins on
                // If we are not on the First day of the week, but before Friday
                if (day > 0 && day < 4) {
                    // Set the date to the start of year
                    this.setFullYear(startOfYear.getFullYear() - 1);
                    this.setDate(31 - day + 1);
                    this.setMonth(11);
                } else if (day > 3) // If we are on Firday or Saturday Sunday
                    this.setDate(startOfYear.getDate() + (7 - day)); // Set the date to the start of year
                this.setDate(this.getDate() + (7 * weekNum));
            };

            return CatTblVarDateUtils;

        }));]]></script>
        <sys_class_name>sp_angular_provider</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-05-27 23:29:12</sys_created_on>
        <sys_id>1b8e3c282fb7c59048dca1fef699b6a1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>cn_sctv_dateUtilsjs</sys_name>
        <sys_package display_value="Cat Tbl Variable" source="x_58056_cat_tbl_var">e5454dd0db230300768670adbf961970</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cat Tbl Variable">e5454dd0db230300768670adbf961970</sys_scope>
        <sys_update_name>sp_angular_provider_1b8e3c282fb7c59048dca1fef699b6a1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-05-27 23:29:12</sys_updated_on>
        <type>factory</type>
    </sp_angular_provider>
</record_update>
